
testing.elf:     file format elf32-littlenios2
testing.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000012a4 memsz 0x000012a4 flags r-x
    LOAD off    0x000022c4 vaddr 0x000112c4 paddr 0x00011450 align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x000025dc vaddr 0x000115dc paddr 0x000115dc align 2**12
         filesz 0x00000000 memsz 0x000001c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001118  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00011298  00011298  00002298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  000112c4  00011450  000022c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c4  000115dc  000115dc  000025dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000117a0  000117a0  00002450  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000418  00000000  00000000  00002478  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000053c5  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d22  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000200a  00000000  00000000  00009977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000590  00000000  00000000  0000b984  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001971  00000000  00000000  0000bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017ee  00000000  00000000  0000d885  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000f074  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f0  00000000  00000000  0000f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000109c2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000109c9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000109ca  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000109d3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  000109e5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000048  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  00010a3f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00049bca  00000000  00000000  00015a48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011298 l    d  .rodata	00000000 .rodata
000112c4 l    d  .rwdata	00000000 .rwdata
000115dc l    d  .bss	00000000 .bss
000117a0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../testing_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 led_acceleromter_main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010630 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000112c4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000113a4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011100 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
000115fc g     O .bss	00000004 alt_instruction_exception_handler
00010eac g     F .text	0000002c alt_main
000116a0 g     O .bss	00000100 alt_irq
00011450 g       *ABS*	00000000 __flash_rwdata_start
000105e4 g     F .text	0000004c printf
000101bc g     F .text	00000038 sys_timer_isr
00011434 g     O .rwdata	00000004 jtag_uart
000111ec g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010ff4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000115e8 g     O .bss	00000004 errno
000115f4 g     O .bss	00000004 alt_argv
00019428 g       *ABS*	00000000 _gp
000113d0 g     O .rwdata	00000030 alt_fd_list
00011174 g     F .text	00000074 alt_find_dev
000111f4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000105a8 g     F .text	0000003c _printf_r
000104ec g     F .text	00000064 .hidden __udivsi3
00011600 g     O .bss	00000050 avgx
00011438 g     O .rwdata	00000004 alt_max_fd
00010d38 g     F .text	00000094 alt_irq_register
00011650 g     O .bss	00000050 avgy
00011428 g     O .rwdata	00000004 _global_impure_ptr
000117a0 g       *ABS*	00000000 __bss_end
000115ec g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011400 g     O .rwdata	00000028 alt_dev_null
000110fc g     F .text	00000004 alt_dcache_flush_all
00011450 g       *ABS*	00000000 __ram_rwdata_end
000102b4 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000101f4 g     F .text	00000060 movingAVGx
0001143c g     O .rwdata	00000008 alt_dev_list
00010ed8 g     F .text	00000060 write
000112c4 g       *ABS*	00000000 __ram_rodata_end
000115e0 g     O .bss	00000001 led
00010550 g     F .text	00000058 .hidden __umodsi3
000117a0 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010f68 g     F .text	00000034 altera_avalon_jtag_uart_write
0001069c g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
000115e4 g     O .bss	00000004 level
00010f58 g     F .text	00000010 alt_sys_init
00010fa4 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010d10 g     F .text	00000028 .hidden __mulsi3
000112c4 g       *ABS*	00000000 __ram_rwdata_start
00011298 g       *ABS*	00000000 __ram_rodata_start
0001104c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011268 g     F .text	00000030 memcmp
000117a0 g       *ABS*	00000000 __alt_stack_base
00011108 g     F .text	0000006c alt_dev_llist_insert
00010be4 g     F .text	000000b8 __sfvwrite_small_dev
000115dc g       *ABS*	00000000 __bss_start
00010324 g     F .text	000000d0 main
000115f0 g     O .bss	00000004 alt_envp
0001144c g     O .rwdata	00000004 alt_errno
000103f4 g     F .text	00000084 .hidden __divsi3
00011298 g       *ABS*	00000000 __flash_rodata_start
00010f38 g     F .text	00000020 alt_irq_init
00010cb8 g     F .text	00000058 _write_r
0001142c g     O .rwdata	00000004 _impure_ptr
000115f8 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000115dc g     O .bss	00000001 pwm
00011444 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010f9c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011450 g       *ABS*	00000000 _edata
000117a0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010478 g     F .text	00000074 .hidden __modsi3
000110a4 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010254 g     F .text	00000060 movingAVGy
0001000c g       .entry	00000000 _exit
00010fb8 g     F .text	00000020 alt_up_accelerometer_spi_read
00010fd8 g     F .text	0000001c alt_up_accelerometer_spi_write
00010c9c g     F .text	0000001c strlen
000111e8 g     F .text	00000004 alt_icache_flush_all
00011430 g     O .rwdata	00000004 alt_priority_mask
00010bc8 g     F .text	0000001c __vfprintf_internal
00010dcc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8405a804 	addi	r16,r16,5792

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07517 	ldw	r2,-32300(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a50a14 	ori	gp,gp,37928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10857714 	ori	r2,r2,5596

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c5e814 	ori	r3,r3,6048

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010dcc0 	call	10dcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010eac0 	call	10eac <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:

	return average/N;
}

void sys_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

	if (pwm > PWM_PERIOD) {
   101c8:	d0a06d03 	ldbu	r2,-32332(gp)
   101cc:	01000404 	movi	r4,16
   101d0:	10c03fcc 	andi	r3,r2,255
   101d4:	18c0201c 	xori	r3,r3,128
   101d8:	18ffe004 	addi	r3,r3,-128
   101dc:	20c0020e 	bge	r4,r3,101e8 <sys_timer_isr+0x2c>
		pwm = 0;
   101e0:	d0206d05 	stb	zero,-32332(gp)
   101e4:	f800283a 	ret
	} else {
		pwm++;
   101e8:	10800044 	addi	r2,r2,1
   101ec:	d0a06d05 	stb	r2,-32332(gp)
   101f0:	f800283a 	ret

000101f4 <movingAVGx>:
int level;

alt_32 avgx[N];
alt_32 avgy[N];

int movingAVGx(alt_32 readVal){
   101f4:	00c00074 	movhi	r3,1
   101f8:	18c58104 	addi	r3,r3,5636
   101fc:	0005883a 	mov	r2,zero

	alt_32 average = 0;
   10200:	000d883a 	mov	r6,zero

	for (int i = 1; i < N; i++){
		avgx[i-1] = avgx[i];
   10204:	1a7fff04 	addi	r9,r3,-4

int movingAVGx(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
   10208:	01c01304 	movi	r7,76
		avgx[i-1] = avgx[i];
   1020c:	19400017 	ldw	r5,0(r3)
   10210:	1251883a 	add	r8,r2,r9
   10214:	10800104 	addi	r2,r2,4
   10218:	41400015 	stw	r5,0(r8)
		average += avgx[i-1];
   1021c:	314d883a 	add	r6,r6,r5
   10220:	18c00104 	addi	r3,r3,4

int movingAVGx(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
   10224:	11fff91e 	bne	r2,r7,1020c <__alt_data_end+0xffff020c>
int level;

alt_32 avgx[N];
alt_32 avgy[N];

int movingAVGx(alt_32 readVal){
   10228:	deffff04 	addi	sp,sp,-4

	for (int i = 1; i < N; i++){
		avgx[i-1] = avgx[i];
		average += avgx[i-1];
	}
	avgx[N-1] = readVal;
   1022c:	00800074 	movhi	r2,1
int level;

alt_32 avgx[N];
alt_32 avgy[N];

int movingAVGx(alt_32 readVal){
   10230:	dfc00015 	stw	ra,0(sp)

	for (int i = 1; i < N; i++){
		avgx[i-1] = avgx[i];
		average += avgx[i-1];
	}
	avgx[N-1] = readVal;
   10234:	10858004 	addi	r2,r2,5632
   10238:	11001315 	stw	r4,76(r2)
	average += avgx[N-1];

	return average/N;
   1023c:	01400504 	movi	r5,20
   10240:	3109883a 	add	r4,r6,r4
   10244:	00103f40 	call	103f4 <__divsi3>

}
   10248:	dfc00017 	ldw	ra,0(sp)
   1024c:	dec00104 	addi	sp,sp,4
   10250:	f800283a 	ret

00010254 <movingAVGy>:
int movingAVGy(alt_32 readVal){
   10254:	00c00074 	movhi	r3,1
   10258:	18c59504 	addi	r3,r3,5716
   1025c:	0005883a 	mov	r2,zero

	alt_32 average = 0;
   10260:	000d883a 	mov	r6,zero

	for (int i = 1; i < N; i++){
		avgy[i-1] = avgy[i];
   10264:	1a7fff04 	addi	r9,r3,-4
}
int movingAVGy(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
   10268:	01c01304 	movi	r7,76
		avgy[i-1] = avgy[i];
   1026c:	19400017 	ldw	r5,0(r3)
   10270:	1251883a 	add	r8,r2,r9
   10274:	10800104 	addi	r2,r2,4
   10278:	41400015 	stw	r5,0(r8)
		average += avgy[i-1];
   1027c:	314d883a 	add	r6,r6,r5
   10280:	18c00104 	addi	r3,r3,4
}
int movingAVGy(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
   10284:	11fff91e 	bne	r2,r7,1026c <__alt_data_end+0xffff026c>
	average += avgx[N-1];

	return average/N;

}
int movingAVGy(alt_32 readVal){
   10288:	deffff04 	addi	sp,sp,-4

	for (int i = 1; i < N; i++){
		avgy[i-1] = avgy[i];
		average += avgy[i-1];
	}
	avgy[N-1] = readVal;
   1028c:	00800074 	movhi	r2,1
	average += avgx[N-1];

	return average/N;

}
int movingAVGy(alt_32 readVal){
   10290:	dfc00015 	stw	ra,0(sp)

	for (int i = 1; i < N; i++){
		avgy[i-1] = avgy[i];
		average += avgy[i-1];
	}
	avgy[N-1] = readVal;
   10294:	10859404 	addi	r2,r2,5712
   10298:	11001315 	stw	r4,76(r2)
	average += avgy[N-1];

	return average/N;
   1029c:	01400504 	movi	r5,20
   102a0:	3109883a 	add	r4,r6,r4
   102a4:	00103f40 	call	103f4 <__divsi3>
}
   102a8:	dfc00017 	ldw	ra,0(sp)
   102ac:	dec00104 	addi	sp,sp,4
   102b0:	f800283a 	ret

000102b4 <timer_init>:
	}
}



void timer_init(void * isr) {
   102b4:	defffe04 	addi	sp,sp,-8
   102b8:	dc000015 	stw	r16,0(sp)

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102bc:	040000b4 	movhi	r16,2
	}
}



void timer_init(void * isr) {
   102c0:	dfc00115 	stw	ra,4(sp)

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102c4:	84040104 	addi	r16,r16,4100
   102c8:	008000c4 	movi	r2,3
   102cc:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102d0:	00c000b4 	movhi	r3,2
   102d4:	0005883a 	mov	r2,zero
   102d8:	18c40004 	addi	r3,r3,4096
   102dc:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102e0:	00c000b4 	movhi	r3,2
   102e4:	18c40204 	addi	r3,r3,4104
   102e8:	01424004 	movi	r5,2304
   102ec:	19400035 	stwio	r5,0(r3)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102f0:	00c000b4 	movhi	r3,2
   102f4:	18c40304 	addi	r3,r3,4108
   102f8:	18800035 	stwio	r2,0(r3)
	alt_irq_register(TIMER_IRQ, 0, isr);
   102fc:	200d883a 	mov	r6,r4
   10300:	000b883a 	mov	r5,zero
   10304:	01000044 	movi	r4,1
   10308:	0010d380 	call	10d38 <alt_irq_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   1030c:	008001c4 	movi	r2,7
   10310:	80800035 	stwio	r2,0(r16)

}
   10314:	dfc00117 	ldw	ra,4(sp)
   10318:	dc000017 	ldw	r16,0(sp)
   1031c:	dec00204 	addi	sp,sp,8
   10320:	f800283a 	ret

00010324 <main>:
	alt_32 z_read;
	alt_u8 sw;
	alt_u8 button;

	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10324:	01000074 	movhi	r4,1

}



int main() {
   10328:	defff804 	addi	sp,sp,-32
	alt_32 z_read;
	alt_u8 sw;
	alt_u8 button;

	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1032c:	2104a604 	addi	r4,r4,4760

}



int main() {
   10330:	dfc00715 	stw	ra,28(sp)
   10334:	dd000615 	stw	r20,24(sp)
   10338:	dcc00515 	stw	r19,20(sp)
   1033c:	dc800415 	stw	r18,16(sp)
   10340:	dc400315 	stw	r17,12(sp)
   10344:	dc000215 	stw	r16,8(sp)
	alt_32 z_read;
	alt_u8 sw;
	alt_u8 button;

	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10348:	0010f9c0 	call	10f9c <alt_up_accelerometer_spi_open_dev>
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   1034c:	10002026 	beq	r2,zero,103d0 <main+0xac>
	return 1;
}

	timer_init(sys_timer_isr);
   10350:	01000074 	movhi	r4,1
   10354:	21006f04 	addi	r4,r4,444

	while (1) {

		sw=IORD(SWITCH_BASE,0);
   10358:	048000b4 	movhi	r18,2
		button=IORD(BUTTON_BASE,0);

		IOWR(LED_BASE,0, sw);
   1035c:	04c000b4 	movhi	r19,2
   10360:	1023883a 	mov	r17,r2

	timer_init(sys_timer_isr);

	while (1) {

		sw=IORD(SWITCH_BASE,0);
   10364:	94840804 	addi	r18,r18,4128
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
	return 1;
}

	timer_init(sys_timer_isr);
   10368:	00102b40 	call	102b4 <timer_init>
	while (1) {

		sw=IORD(SWITCH_BASE,0);
		button=IORD(BUTTON_BASE,0);

		IOWR(LED_BASE,0, sw);
   1036c:	9cc40c04 	addi	r19,r19,4144
	timer_init(sys_timer_isr);

	while (1) {

		sw=IORD(SWITCH_BASE,0);
		button=IORD(BUTTON_BASE,0);
   10370:	0029883a 	mov	r20,zero

	timer_init(sys_timer_isr);

	while (1) {

		sw=IORD(SWITCH_BASE,0);
   10374:	94000037 	ldwio	r16,0(r18)
		button=IORD(BUTTON_BASE,0);
   10378:	a0800037 	ldwio	r2,0(r20)

		IOWR(LED_BASE,0, sw);
   1037c:	80803fcc 	andi	r2,r16,255
   10380:	98800035 	stwio	r2,0(r19)

		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10384:	d9400104 	addi	r5,sp,4
   10388:	8809883a 	mov	r4,r17
   1038c:	0010ff40 	call	10ff4 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10390:	d80b883a 	mov	r5,sp
   10394:	8809883a 	mov	r4,r17
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
		//alt_printf("X AXIS = %x || Y AXIS = %x || Z AXIS = %x \n",movingAVG2(x_read),movingAVG2(y_read),movingAVG2(z_read));
		if ((sw & 0x01)==1){
   10398:	8400004c 	andi	r16,r16,1
		button=IORD(BUTTON_BASE,0);

		IOWR(LED_BASE,0, sw);

		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1039c:	001104c0 	call	1104c <alt_up_accelerometer_spi_read_y_axis>
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
		//alt_printf("X AXIS = %x || Y AXIS = %x || Z AXIS = %x \n",movingAVG2(x_read),movingAVG2(y_read),movingAVG2(z_read));
		if ((sw & 0x01)==1){
   103a0:	803ff426 	beq	r16,zero,10374 <__alt_data_end+0xffff0374>
		   printf("%d|%d\n",movingAVGx(x_read),movingAVGy(y_read));
   103a4:	d9000117 	ldw	r4,4(sp)
   103a8:	00101f40 	call	101f4 <movingAVGx>
   103ac:	d9000017 	ldw	r4,0(sp)
   103b0:	1021883a 	mov	r16,r2
   103b4:	00102540 	call	10254 <movingAVGy>
   103b8:	01000074 	movhi	r4,1
   103bc:	100d883a 	mov	r6,r2
   103c0:	800b883a 	mov	r5,r16
   103c4:	2104ac04 	addi	r4,r4,4784
   103c8:	00105e40 	call	105e4 <printf>
   103cc:	003fe806 	br	10370 <__alt_data_end+0xffff0370>


	}

	return 0;
}
   103d0:	00800044 	movi	r2,1
   103d4:	dfc00717 	ldw	ra,28(sp)
   103d8:	dd000617 	ldw	r20,24(sp)
   103dc:	dcc00517 	ldw	r19,20(sp)
   103e0:	dc800417 	ldw	r18,16(sp)
   103e4:	dc400317 	ldw	r17,12(sp)
   103e8:	dc000217 	ldw	r16,8(sp)
   103ec:	dec00804 	addi	sp,sp,32
   103f0:	f800283a 	ret

000103f4 <__divsi3>:
   103f4:	20001b16 	blt	r4,zero,10464 <__divsi3+0x70>
   103f8:	000f883a 	mov	r7,zero
   103fc:	28001616 	blt	r5,zero,10458 <__divsi3+0x64>
   10400:	200d883a 	mov	r6,r4
   10404:	29001a2e 	bgeu	r5,r4,10470 <__divsi3+0x7c>
   10408:	00800804 	movi	r2,32
   1040c:	00c00044 	movi	r3,1
   10410:	00000106 	br	10418 <__divsi3+0x24>
   10414:	10000d26 	beq	r2,zero,1044c <__divsi3+0x58>
   10418:	294b883a 	add	r5,r5,r5
   1041c:	10bfffc4 	addi	r2,r2,-1
   10420:	18c7883a 	add	r3,r3,r3
   10424:	293ffb36 	bltu	r5,r4,10414 <__alt_data_end+0xffff0414>
   10428:	0005883a 	mov	r2,zero
   1042c:	18000726 	beq	r3,zero,1044c <__divsi3+0x58>
   10430:	0005883a 	mov	r2,zero
   10434:	31400236 	bltu	r6,r5,10440 <__divsi3+0x4c>
   10438:	314dc83a 	sub	r6,r6,r5
   1043c:	10c4b03a 	or	r2,r2,r3
   10440:	1806d07a 	srli	r3,r3,1
   10444:	280ad07a 	srli	r5,r5,1
   10448:	183ffa1e 	bne	r3,zero,10434 <__alt_data_end+0xffff0434>
   1044c:	38000126 	beq	r7,zero,10454 <__divsi3+0x60>
   10450:	0085c83a 	sub	r2,zero,r2
   10454:	f800283a 	ret
   10458:	014bc83a 	sub	r5,zero,r5
   1045c:	39c0005c 	xori	r7,r7,1
   10460:	003fe706 	br	10400 <__alt_data_end+0xffff0400>
   10464:	0109c83a 	sub	r4,zero,r4
   10468:	01c00044 	movi	r7,1
   1046c:	003fe306 	br	103fc <__alt_data_end+0xffff03fc>
   10470:	00c00044 	movi	r3,1
   10474:	003fee06 	br	10430 <__alt_data_end+0xffff0430>

00010478 <__modsi3>:
   10478:	20001716 	blt	r4,zero,104d8 <__modsi3+0x60>
   1047c:	000f883a 	mov	r7,zero
   10480:	2005883a 	mov	r2,r4
   10484:	28001216 	blt	r5,zero,104d0 <__modsi3+0x58>
   10488:	2900162e 	bgeu	r5,r4,104e4 <__modsi3+0x6c>
   1048c:	01800804 	movi	r6,32
   10490:	00c00044 	movi	r3,1
   10494:	00000106 	br	1049c <__modsi3+0x24>
   10498:	30000a26 	beq	r6,zero,104c4 <__modsi3+0x4c>
   1049c:	294b883a 	add	r5,r5,r5
   104a0:	31bfffc4 	addi	r6,r6,-1
   104a4:	18c7883a 	add	r3,r3,r3
   104a8:	293ffb36 	bltu	r5,r4,10498 <__alt_data_end+0xffff0498>
   104ac:	18000526 	beq	r3,zero,104c4 <__modsi3+0x4c>
   104b0:	1806d07a 	srli	r3,r3,1
   104b4:	11400136 	bltu	r2,r5,104bc <__modsi3+0x44>
   104b8:	1145c83a 	sub	r2,r2,r5
   104bc:	280ad07a 	srli	r5,r5,1
   104c0:	183ffb1e 	bne	r3,zero,104b0 <__alt_data_end+0xffff04b0>
   104c4:	38000126 	beq	r7,zero,104cc <__modsi3+0x54>
   104c8:	0085c83a 	sub	r2,zero,r2
   104cc:	f800283a 	ret
   104d0:	014bc83a 	sub	r5,zero,r5
   104d4:	003fec06 	br	10488 <__alt_data_end+0xffff0488>
   104d8:	0109c83a 	sub	r4,zero,r4
   104dc:	01c00044 	movi	r7,1
   104e0:	003fe706 	br	10480 <__alt_data_end+0xffff0480>
   104e4:	00c00044 	movi	r3,1
   104e8:	003ff106 	br	104b0 <__alt_data_end+0xffff04b0>

000104ec <__udivsi3>:
   104ec:	200d883a 	mov	r6,r4
   104f0:	2900152e 	bgeu	r5,r4,10548 <__udivsi3+0x5c>
   104f4:	28001416 	blt	r5,zero,10548 <__udivsi3+0x5c>
   104f8:	00800804 	movi	r2,32
   104fc:	00c00044 	movi	r3,1
   10500:	00000206 	br	1050c <__udivsi3+0x20>
   10504:	10000e26 	beq	r2,zero,10540 <__udivsi3+0x54>
   10508:	28000516 	blt	r5,zero,10520 <__udivsi3+0x34>
   1050c:	294b883a 	add	r5,r5,r5
   10510:	10bfffc4 	addi	r2,r2,-1
   10514:	18c7883a 	add	r3,r3,r3
   10518:	293ffa36 	bltu	r5,r4,10504 <__alt_data_end+0xffff0504>
   1051c:	18000826 	beq	r3,zero,10540 <__udivsi3+0x54>
   10520:	0005883a 	mov	r2,zero
   10524:	31400236 	bltu	r6,r5,10530 <__udivsi3+0x44>
   10528:	314dc83a 	sub	r6,r6,r5
   1052c:	10c4b03a 	or	r2,r2,r3
   10530:	1806d07a 	srli	r3,r3,1
   10534:	280ad07a 	srli	r5,r5,1
   10538:	183ffa1e 	bne	r3,zero,10524 <__alt_data_end+0xffff0524>
   1053c:	f800283a 	ret
   10540:	0005883a 	mov	r2,zero
   10544:	f800283a 	ret
   10548:	00c00044 	movi	r3,1
   1054c:	003ff406 	br	10520 <__alt_data_end+0xffff0520>

00010550 <__umodsi3>:
   10550:	2005883a 	mov	r2,r4
   10554:	2900122e 	bgeu	r5,r4,105a0 <__umodsi3+0x50>
   10558:	28001116 	blt	r5,zero,105a0 <__umodsi3+0x50>
   1055c:	01800804 	movi	r6,32
   10560:	00c00044 	movi	r3,1
   10564:	00000206 	br	10570 <__umodsi3+0x20>
   10568:	30000c26 	beq	r6,zero,1059c <__umodsi3+0x4c>
   1056c:	28000516 	blt	r5,zero,10584 <__umodsi3+0x34>
   10570:	294b883a 	add	r5,r5,r5
   10574:	31bfffc4 	addi	r6,r6,-1
   10578:	18c7883a 	add	r3,r3,r3
   1057c:	293ffa36 	bltu	r5,r4,10568 <__alt_data_end+0xffff0568>
   10580:	18000626 	beq	r3,zero,1059c <__umodsi3+0x4c>
   10584:	1806d07a 	srli	r3,r3,1
   10588:	11400136 	bltu	r2,r5,10590 <__umodsi3+0x40>
   1058c:	1145c83a 	sub	r2,r2,r5
   10590:	280ad07a 	srli	r5,r5,1
   10594:	183ffb1e 	bne	r3,zero,10584 <__alt_data_end+0xffff0584>
   10598:	f800283a 	ret
   1059c:	f800283a 	ret
   105a0:	00c00044 	movi	r3,1
   105a4:	003ff706 	br	10584 <__alt_data_end+0xffff0584>

000105a8 <_printf_r>:
   105a8:	defffd04 	addi	sp,sp,-12
   105ac:	dfc00015 	stw	ra,0(sp)
   105b0:	d9800115 	stw	r6,4(sp)
   105b4:	d9c00215 	stw	r7,8(sp)
   105b8:	20c00217 	ldw	r3,8(r4)
   105bc:	01800074 	movhi	r6,1
   105c0:	3182f904 	addi	r6,r6,3044
   105c4:	19800115 	stw	r6,4(r3)
   105c8:	280d883a 	mov	r6,r5
   105cc:	21400217 	ldw	r5,8(r4)
   105d0:	d9c00104 	addi	r7,sp,4
   105d4:	001069c0 	call	1069c <___vfprintf_internal_r>
   105d8:	dfc00017 	ldw	ra,0(sp)
   105dc:	dec00304 	addi	sp,sp,12
   105e0:	f800283a 	ret

000105e4 <printf>:
   105e4:	defffc04 	addi	sp,sp,-16
   105e8:	dfc00015 	stw	ra,0(sp)
   105ec:	d9400115 	stw	r5,4(sp)
   105f0:	d9800215 	stw	r6,8(sp)
   105f4:	d9c00315 	stw	r7,12(sp)
   105f8:	00800074 	movhi	r2,1
   105fc:	10850b04 	addi	r2,r2,5164
   10600:	10800017 	ldw	r2,0(r2)
   10604:	01400074 	movhi	r5,1
   10608:	2942f904 	addi	r5,r5,3044
   1060c:	10c00217 	ldw	r3,8(r2)
   10610:	d9800104 	addi	r6,sp,4
   10614:	19400115 	stw	r5,4(r3)
   10618:	200b883a 	mov	r5,r4
   1061c:	11000217 	ldw	r4,8(r2)
   10620:	0010bc80 	call	10bc8 <__vfprintf_internal>
   10624:	dfc00017 	ldw	ra,0(sp)
   10628:	dec00404 	addi	sp,sp,16
   1062c:	f800283a 	ret

00010630 <print_repeat>:
   10630:	defffb04 	addi	sp,sp,-20
   10634:	dc800315 	stw	r18,12(sp)
   10638:	dc400215 	stw	r17,8(sp)
   1063c:	dc000115 	stw	r16,4(sp)
   10640:	dfc00415 	stw	ra,16(sp)
   10644:	2025883a 	mov	r18,r4
   10648:	2823883a 	mov	r17,r5
   1064c:	d9800005 	stb	r6,0(sp)
   10650:	3821883a 	mov	r16,r7
   10654:	04000a0e 	bge	zero,r16,10680 <print_repeat+0x50>
   10658:	88800117 	ldw	r2,4(r17)
   1065c:	01c00044 	movi	r7,1
   10660:	d80d883a 	mov	r6,sp
   10664:	880b883a 	mov	r5,r17
   10668:	9009883a 	mov	r4,r18
   1066c:	103ee83a 	callr	r2
   10670:	843fffc4 	addi	r16,r16,-1
   10674:	103ff726 	beq	r2,zero,10654 <__alt_data_end+0xffff0654>
   10678:	00bfffc4 	movi	r2,-1
   1067c:	00000106 	br	10684 <print_repeat+0x54>
   10680:	0005883a 	mov	r2,zero
   10684:	dfc00417 	ldw	ra,16(sp)
   10688:	dc800317 	ldw	r18,12(sp)
   1068c:	dc400217 	ldw	r17,8(sp)
   10690:	dc000117 	ldw	r16,4(sp)
   10694:	dec00504 	addi	sp,sp,20
   10698:	f800283a 	ret

0001069c <___vfprintf_internal_r>:
   1069c:	deffe504 	addi	sp,sp,-108
   106a0:	d8c00804 	addi	r3,sp,32
   106a4:	ddc01815 	stw	r23,96(sp)
   106a8:	dd801715 	stw	r22,92(sp)
   106ac:	dd401615 	stw	r21,88(sp)
   106b0:	dd001515 	stw	r20,84(sp)
   106b4:	dcc01415 	stw	r19,80(sp)
   106b8:	dc801315 	stw	r18,76(sp)
   106bc:	dc401215 	stw	r17,72(sp)
   106c0:	dc001115 	stw	r16,68(sp)
   106c4:	dfc01a15 	stw	ra,104(sp)
   106c8:	df001915 	stw	fp,100(sp)
   106cc:	2029883a 	mov	r20,r4
   106d0:	2823883a 	mov	r17,r5
   106d4:	382d883a 	mov	r22,r7
   106d8:	d9800f15 	stw	r6,60(sp)
   106dc:	0021883a 	mov	r16,zero
   106e0:	d8000e15 	stw	zero,56(sp)
   106e4:	d8000a15 	stw	zero,40(sp)
   106e8:	002b883a 	mov	r21,zero
   106ec:	0027883a 	mov	r19,zero
   106f0:	0025883a 	mov	r18,zero
   106f4:	d8000c15 	stw	zero,48(sp)
   106f8:	d8000b15 	stw	zero,44(sp)
   106fc:	002f883a 	mov	r23,zero
   10700:	d8c00915 	stw	r3,36(sp)
   10704:	d8c00f17 	ldw	r3,60(sp)
   10708:	19000003 	ldbu	r4,0(r3)
   1070c:	20803fcc 	andi	r2,r4,255
   10710:	1080201c 	xori	r2,r2,128
   10714:	10bfe004 	addi	r2,r2,-128
   10718:	10011e26 	beq	r2,zero,10b94 <___vfprintf_internal_r+0x4f8>
   1071c:	00c00044 	movi	r3,1
   10720:	b8c01426 	beq	r23,r3,10774 <___vfprintf_internal_r+0xd8>
   10724:	1dc00216 	blt	r3,r23,10730 <___vfprintf_internal_r+0x94>
   10728:	b8000626 	beq	r23,zero,10744 <___vfprintf_internal_r+0xa8>
   1072c:	00011506 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10730:	01400084 	movi	r5,2
   10734:	b9401d26 	beq	r23,r5,107ac <___vfprintf_internal_r+0x110>
   10738:	014000c4 	movi	r5,3
   1073c:	b9402b26 	beq	r23,r5,107ec <___vfprintf_internal_r+0x150>
   10740:	00011006 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10744:	01400944 	movi	r5,37
   10748:	1140fc26 	beq	r2,r5,10b3c <___vfprintf_internal_r+0x4a0>
   1074c:	88800117 	ldw	r2,4(r17)
   10750:	d9000005 	stb	r4,0(sp)
   10754:	01c00044 	movi	r7,1
   10758:	d80d883a 	mov	r6,sp
   1075c:	880b883a 	mov	r5,r17
   10760:	a009883a 	mov	r4,r20
   10764:	103ee83a 	callr	r2
   10768:	1000d81e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   1076c:	84000044 	addi	r16,r16,1
   10770:	00010406 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10774:	01400c04 	movi	r5,48
   10778:	1140fa26 	beq	r2,r5,10b64 <___vfprintf_internal_r+0x4c8>
   1077c:	01400944 	movi	r5,37
   10780:	11400a1e 	bne	r2,r5,107ac <___vfprintf_internal_r+0x110>
   10784:	d8800005 	stb	r2,0(sp)
   10788:	88800117 	ldw	r2,4(r17)
   1078c:	b80f883a 	mov	r7,r23
   10790:	d80d883a 	mov	r6,sp
   10794:	880b883a 	mov	r5,r17
   10798:	a009883a 	mov	r4,r20
   1079c:	103ee83a 	callr	r2
   107a0:	1000ca1e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   107a4:	84000044 	addi	r16,r16,1
   107a8:	0000f506 	br	10b80 <___vfprintf_internal_r+0x4e4>
   107ac:	25fff404 	addi	r23,r4,-48
   107b0:	bdc03fcc 	andi	r23,r23,255
   107b4:	00c00244 	movi	r3,9
   107b8:	1dc00936 	bltu	r3,r23,107e0 <___vfprintf_internal_r+0x144>
   107bc:	00bfffc4 	movi	r2,-1
   107c0:	90800426 	beq	r18,r2,107d4 <___vfprintf_internal_r+0x138>
   107c4:	01400284 	movi	r5,10
   107c8:	9009883a 	mov	r4,r18
   107cc:	0010d100 	call	10d10 <__mulsi3>
   107d0:	00000106 	br	107d8 <___vfprintf_internal_r+0x13c>
   107d4:	0005883a 	mov	r2,zero
   107d8:	b8a5883a 	add	r18,r23,r2
   107dc:	0000e206 	br	10b68 <___vfprintf_internal_r+0x4cc>
   107e0:	01400b84 	movi	r5,46
   107e4:	1140e426 	beq	r2,r5,10b78 <___vfprintf_internal_r+0x4dc>
   107e8:	05c00084 	movi	r23,2
   107ec:	213ff404 	addi	r4,r4,-48
   107f0:	27003fcc 	andi	fp,r4,255
   107f4:	00c00244 	movi	r3,9
   107f8:	1f000936 	bltu	r3,fp,10820 <___vfprintf_internal_r+0x184>
   107fc:	00bfffc4 	movi	r2,-1
   10800:	98800426 	beq	r19,r2,10814 <___vfprintf_internal_r+0x178>
   10804:	01400284 	movi	r5,10
   10808:	9809883a 	mov	r4,r19
   1080c:	0010d100 	call	10d10 <__mulsi3>
   10810:	00000106 	br	10818 <___vfprintf_internal_r+0x17c>
   10814:	0005883a 	mov	r2,zero
   10818:	e0a7883a 	add	r19,fp,r2
   1081c:	0000d906 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10820:	00c01b04 	movi	r3,108
   10824:	10c0d226 	beq	r2,r3,10b70 <___vfprintf_internal_r+0x4d4>
   10828:	013fffc4 	movi	r4,-1
   1082c:	99000226 	beq	r19,r4,10838 <___vfprintf_internal_r+0x19c>
   10830:	d8000b15 	stw	zero,44(sp)
   10834:	00000106 	br	1083c <___vfprintf_internal_r+0x1a0>
   10838:	04c00044 	movi	r19,1
   1083c:	01001a44 	movi	r4,105
   10840:	11001626 	beq	r2,r4,1089c <___vfprintf_internal_r+0x200>
   10844:	20800916 	blt	r4,r2,1086c <___vfprintf_internal_r+0x1d0>
   10848:	010018c4 	movi	r4,99
   1084c:	11008826 	beq	r2,r4,10a70 <___vfprintf_internal_r+0x3d4>
   10850:	01001904 	movi	r4,100
   10854:	11001126 	beq	r2,r4,1089c <___vfprintf_internal_r+0x200>
   10858:	01001604 	movi	r4,88
   1085c:	1100c81e 	bne	r2,r4,10b80 <___vfprintf_internal_r+0x4e4>
   10860:	00c00044 	movi	r3,1
   10864:	d8c00e15 	stw	r3,56(sp)
   10868:	00001506 	br	108c0 <___vfprintf_internal_r+0x224>
   1086c:	01001cc4 	movi	r4,115
   10870:	11009826 	beq	r2,r4,10ad4 <___vfprintf_internal_r+0x438>
   10874:	20800416 	blt	r4,r2,10888 <___vfprintf_internal_r+0x1ec>
   10878:	01001bc4 	movi	r4,111
   1087c:	1100c01e 	bne	r2,r4,10b80 <___vfprintf_internal_r+0x4e4>
   10880:	05400204 	movi	r21,8
   10884:	00000f06 	br	108c4 <___vfprintf_internal_r+0x228>
   10888:	01001d44 	movi	r4,117
   1088c:	11000d26 	beq	r2,r4,108c4 <___vfprintf_internal_r+0x228>
   10890:	01001e04 	movi	r4,120
   10894:	11000a26 	beq	r2,r4,108c0 <___vfprintf_internal_r+0x224>
   10898:	0000b906 	br	10b80 <___vfprintf_internal_r+0x4e4>
   1089c:	d8c00a17 	ldw	r3,40(sp)
   108a0:	b7000104 	addi	fp,r22,4
   108a4:	18000726 	beq	r3,zero,108c4 <___vfprintf_internal_r+0x228>
   108a8:	df000d15 	stw	fp,52(sp)
   108ac:	b5c00017 	ldw	r23,0(r22)
   108b0:	b800080e 	bge	r23,zero,108d4 <___vfprintf_internal_r+0x238>
   108b4:	05efc83a 	sub	r23,zero,r23
   108b8:	02400044 	movi	r9,1
   108bc:	00000606 	br	108d8 <___vfprintf_internal_r+0x23c>
   108c0:	05400404 	movi	r21,16
   108c4:	b0c00104 	addi	r3,r22,4
   108c8:	d8c00d15 	stw	r3,52(sp)
   108cc:	b5c00017 	ldw	r23,0(r22)
   108d0:	d8000a15 	stw	zero,40(sp)
   108d4:	0013883a 	mov	r9,zero
   108d8:	d839883a 	mov	fp,sp
   108dc:	b8001726 	beq	r23,zero,1093c <___vfprintf_internal_r+0x2a0>
   108e0:	a80b883a 	mov	r5,r21
   108e4:	b809883a 	mov	r4,r23
   108e8:	da401015 	stw	r9,64(sp)
   108ec:	00104ec0 	call	104ec <__udivsi3>
   108f0:	a80b883a 	mov	r5,r21
   108f4:	1009883a 	mov	r4,r2
   108f8:	102d883a 	mov	r22,r2
   108fc:	0010d100 	call	10d10 <__mulsi3>
   10900:	b885c83a 	sub	r2,r23,r2
   10904:	00c00244 	movi	r3,9
   10908:	da401017 	ldw	r9,64(sp)
   1090c:	18800216 	blt	r3,r2,10918 <___vfprintf_internal_r+0x27c>
   10910:	10800c04 	addi	r2,r2,48
   10914:	00000506 	br	1092c <___vfprintf_internal_r+0x290>
   10918:	d8c00e17 	ldw	r3,56(sp)
   1091c:	18000226 	beq	r3,zero,10928 <___vfprintf_internal_r+0x28c>
   10920:	10800dc4 	addi	r2,r2,55
   10924:	00000106 	br	1092c <___vfprintf_internal_r+0x290>
   10928:	108015c4 	addi	r2,r2,87
   1092c:	e0800005 	stb	r2,0(fp)
   10930:	b02f883a 	mov	r23,r22
   10934:	e7000044 	addi	fp,fp,1
   10938:	003fe806 	br	108dc <__alt_data_end+0xffff08dc>
   1093c:	e6efc83a 	sub	r23,fp,sp
   10940:	9dc5c83a 	sub	r2,r19,r23
   10944:	0080090e 	bge	zero,r2,1096c <___vfprintf_internal_r+0x2d0>
   10948:	e085883a 	add	r2,fp,r2
   1094c:	01400c04 	movi	r5,48
   10950:	d8c00917 	ldw	r3,36(sp)
   10954:	e009883a 	mov	r4,fp
   10958:	e0c0032e 	bgeu	fp,r3,10968 <___vfprintf_internal_r+0x2cc>
   1095c:	e7000044 	addi	fp,fp,1
   10960:	21400005 	stb	r5,0(r4)
   10964:	e0bffa1e 	bne	fp,r2,10950 <__alt_data_end+0xffff0950>
   10968:	e6efc83a 	sub	r23,fp,sp
   1096c:	d8c00b17 	ldw	r3,44(sp)
   10970:	4dd1883a 	add	r8,r9,r23
   10974:	922dc83a 	sub	r22,r18,r8
   10978:	18001626 	beq	r3,zero,109d4 <___vfprintf_internal_r+0x338>
   1097c:	48000a26 	beq	r9,zero,109a8 <___vfprintf_internal_r+0x30c>
   10980:	00800b44 	movi	r2,45
   10984:	d8800805 	stb	r2,32(sp)
   10988:	88800117 	ldw	r2,4(r17)
   1098c:	01c00044 	movi	r7,1
   10990:	d9800804 	addi	r6,sp,32
   10994:	880b883a 	mov	r5,r17
   10998:	a009883a 	mov	r4,r20
   1099c:	103ee83a 	callr	r2
   109a0:	10004a1e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   109a4:	84000044 	addi	r16,r16,1
   109a8:	0580070e 	bge	zero,r22,109c8 <___vfprintf_internal_r+0x32c>
   109ac:	b00f883a 	mov	r7,r22
   109b0:	01800c04 	movi	r6,48
   109b4:	880b883a 	mov	r5,r17
   109b8:	a009883a 	mov	r4,r20
   109bc:	00106300 	call	10630 <print_repeat>
   109c0:	1000421e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   109c4:	85a1883a 	add	r16,r16,r22
   109c8:	e02d883a 	mov	r22,fp
   109cc:	bf2fc83a 	sub	r23,r23,fp
   109d0:	00002006 	br	10a54 <___vfprintf_internal_r+0x3b8>
   109d4:	0580090e 	bge	zero,r22,109fc <___vfprintf_internal_r+0x360>
   109d8:	b00f883a 	mov	r7,r22
   109dc:	01800804 	movi	r6,32
   109e0:	880b883a 	mov	r5,r17
   109e4:	a009883a 	mov	r4,r20
   109e8:	da401015 	stw	r9,64(sp)
   109ec:	00106300 	call	10630 <print_repeat>
   109f0:	da401017 	ldw	r9,64(sp)
   109f4:	1000351e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   109f8:	85a1883a 	add	r16,r16,r22
   109fc:	483ff226 	beq	r9,zero,109c8 <__alt_data_end+0xffff09c8>
   10a00:	00800b44 	movi	r2,45
   10a04:	d8800805 	stb	r2,32(sp)
   10a08:	88800117 	ldw	r2,4(r17)
   10a0c:	01c00044 	movi	r7,1
   10a10:	d9800804 	addi	r6,sp,32
   10a14:	880b883a 	mov	r5,r17
   10a18:	a009883a 	mov	r4,r20
   10a1c:	103ee83a 	callr	r2
   10a20:	10002a1e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   10a24:	84000044 	addi	r16,r16,1
   10a28:	003fe706 	br	109c8 <__alt_data_end+0xffff09c8>
   10a2c:	b5bfffc4 	addi	r22,r22,-1
   10a30:	b0800003 	ldbu	r2,0(r22)
   10a34:	01c00044 	movi	r7,1
   10a38:	d9800804 	addi	r6,sp,32
   10a3c:	d8800805 	stb	r2,32(sp)
   10a40:	88800117 	ldw	r2,4(r17)
   10a44:	880b883a 	mov	r5,r17
   10a48:	a009883a 	mov	r4,r20
   10a4c:	103ee83a 	callr	r2
   10a50:	10001e1e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   10a54:	8585c83a 	sub	r2,r16,r22
   10a58:	b5c9883a 	add	r4,r22,r23
   10a5c:	e085883a 	add	r2,fp,r2
   10a60:	013ff216 	blt	zero,r4,10a2c <__alt_data_end+0xffff0a2c>
   10a64:	1021883a 	mov	r16,r2
   10a68:	dd800d17 	ldw	r22,52(sp)
   10a6c:	00004406 	br	10b80 <___vfprintf_internal_r+0x4e4>
   10a70:	00800044 	movi	r2,1
   10a74:	1480080e 	bge	r2,r18,10a98 <___vfprintf_internal_r+0x3fc>
   10a78:	95ffffc4 	addi	r23,r18,-1
   10a7c:	b80f883a 	mov	r7,r23
   10a80:	01800804 	movi	r6,32
   10a84:	880b883a 	mov	r5,r17
   10a88:	a009883a 	mov	r4,r20
   10a8c:	00106300 	call	10630 <print_repeat>
   10a90:	10000e1e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   10a94:	85e1883a 	add	r16,r16,r23
   10a98:	b0800017 	ldw	r2,0(r22)
   10a9c:	01c00044 	movi	r7,1
   10aa0:	d80d883a 	mov	r6,sp
   10aa4:	d8800005 	stb	r2,0(sp)
   10aa8:	88800117 	ldw	r2,4(r17)
   10aac:	880b883a 	mov	r5,r17
   10ab0:	a009883a 	mov	r4,r20
   10ab4:	b5c00104 	addi	r23,r22,4
   10ab8:	103ee83a 	callr	r2
   10abc:	1000031e 	bne	r2,zero,10acc <___vfprintf_internal_r+0x430>
   10ac0:	84000044 	addi	r16,r16,1
   10ac4:	b82d883a 	mov	r22,r23
   10ac8:	00002d06 	br	10b80 <___vfprintf_internal_r+0x4e4>
   10acc:	00bfffc4 	movi	r2,-1
   10ad0:	00003106 	br	10b98 <___vfprintf_internal_r+0x4fc>
   10ad4:	b5c00017 	ldw	r23,0(r22)
   10ad8:	b7000104 	addi	fp,r22,4
   10adc:	b809883a 	mov	r4,r23
   10ae0:	0010c9c0 	call	10c9c <strlen>
   10ae4:	9091c83a 	sub	r8,r18,r2
   10ae8:	102d883a 	mov	r22,r2
   10aec:	0200090e 	bge	zero,r8,10b14 <___vfprintf_internal_r+0x478>
   10af0:	400f883a 	mov	r7,r8
   10af4:	01800804 	movi	r6,32
   10af8:	880b883a 	mov	r5,r17
   10afc:	a009883a 	mov	r4,r20
   10b00:	da001015 	stw	r8,64(sp)
   10b04:	00106300 	call	10630 <print_repeat>
   10b08:	da001017 	ldw	r8,64(sp)
   10b0c:	103fef1e 	bne	r2,zero,10acc <__alt_data_end+0xffff0acc>
   10b10:	8221883a 	add	r16,r16,r8
   10b14:	88800117 	ldw	r2,4(r17)
   10b18:	b00f883a 	mov	r7,r22
   10b1c:	b80d883a 	mov	r6,r23
   10b20:	880b883a 	mov	r5,r17
   10b24:	a009883a 	mov	r4,r20
   10b28:	103ee83a 	callr	r2
   10b2c:	103fe71e 	bne	r2,zero,10acc <__alt_data_end+0xffff0acc>
   10b30:	85a1883a 	add	r16,r16,r22
   10b34:	e02d883a 	mov	r22,fp
   10b38:	00001106 	br	10b80 <___vfprintf_internal_r+0x4e4>
   10b3c:	00c00044 	movi	r3,1
   10b40:	04ffffc4 	movi	r19,-1
   10b44:	d8000e15 	stw	zero,56(sp)
   10b48:	d8c00a15 	stw	r3,40(sp)
   10b4c:	05400284 	movi	r21,10
   10b50:	9825883a 	mov	r18,r19
   10b54:	d8000c15 	stw	zero,48(sp)
   10b58:	d8000b15 	stw	zero,44(sp)
   10b5c:	182f883a 	mov	r23,r3
   10b60:	00000806 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10b64:	ddc00b15 	stw	r23,44(sp)
   10b68:	05c00084 	movi	r23,2
   10b6c:	00000506 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10b70:	00c00044 	movi	r3,1
   10b74:	d8c00c15 	stw	r3,48(sp)
   10b78:	05c000c4 	movi	r23,3
   10b7c:	00000106 	br	10b84 <___vfprintf_internal_r+0x4e8>
   10b80:	002f883a 	mov	r23,zero
   10b84:	d8c00f17 	ldw	r3,60(sp)
   10b88:	18c00044 	addi	r3,r3,1
   10b8c:	d8c00f15 	stw	r3,60(sp)
   10b90:	003edc06 	br	10704 <__alt_data_end+0xffff0704>
   10b94:	8005883a 	mov	r2,r16
   10b98:	dfc01a17 	ldw	ra,104(sp)
   10b9c:	df001917 	ldw	fp,100(sp)
   10ba0:	ddc01817 	ldw	r23,96(sp)
   10ba4:	dd801717 	ldw	r22,92(sp)
   10ba8:	dd401617 	ldw	r21,88(sp)
   10bac:	dd001517 	ldw	r20,84(sp)
   10bb0:	dcc01417 	ldw	r19,80(sp)
   10bb4:	dc801317 	ldw	r18,76(sp)
   10bb8:	dc401217 	ldw	r17,72(sp)
   10bbc:	dc001117 	ldw	r16,68(sp)
   10bc0:	dec01b04 	addi	sp,sp,108
   10bc4:	f800283a 	ret

00010bc8 <__vfprintf_internal>:
   10bc8:	00800074 	movhi	r2,1
   10bcc:	10850b04 	addi	r2,r2,5164
   10bd0:	300f883a 	mov	r7,r6
   10bd4:	280d883a 	mov	r6,r5
   10bd8:	200b883a 	mov	r5,r4
   10bdc:	11000017 	ldw	r4,0(r2)
   10be0:	001069c1 	jmpi	1069c <___vfprintf_internal_r>

00010be4 <__sfvwrite_small_dev>:
   10be4:	2880000b 	ldhu	r2,0(r5)
   10be8:	1080020c 	andi	r2,r2,8
   10bec:	10002126 	beq	r2,zero,10c74 <__sfvwrite_small_dev+0x90>
   10bf0:	2880008f 	ldh	r2,2(r5)
   10bf4:	defffa04 	addi	sp,sp,-24
   10bf8:	dc000015 	stw	r16,0(sp)
   10bfc:	dfc00515 	stw	ra,20(sp)
   10c00:	dd000415 	stw	r20,16(sp)
   10c04:	dcc00315 	stw	r19,12(sp)
   10c08:	dc800215 	stw	r18,8(sp)
   10c0c:	dc400115 	stw	r17,4(sp)
   10c10:	2821883a 	mov	r16,r5
   10c14:	10001216 	blt	r2,zero,10c60 <__sfvwrite_small_dev+0x7c>
   10c18:	2027883a 	mov	r19,r4
   10c1c:	3025883a 	mov	r18,r6
   10c20:	3823883a 	mov	r17,r7
   10c24:	05010004 	movi	r20,1024
   10c28:	04400b0e 	bge	zero,r17,10c58 <__sfvwrite_small_dev+0x74>
   10c2c:	880f883a 	mov	r7,r17
   10c30:	a440010e 	bge	r20,r17,10c38 <__sfvwrite_small_dev+0x54>
   10c34:	01c10004 	movi	r7,1024
   10c38:	8140008f 	ldh	r5,2(r16)
   10c3c:	900d883a 	mov	r6,r18
   10c40:	9809883a 	mov	r4,r19
   10c44:	0010cb80 	call	10cb8 <_write_r>
   10c48:	0080050e 	bge	zero,r2,10c60 <__sfvwrite_small_dev+0x7c>
   10c4c:	88a3c83a 	sub	r17,r17,r2
   10c50:	90a5883a 	add	r18,r18,r2
   10c54:	003ff406 	br	10c28 <__alt_data_end+0xffff0c28>
   10c58:	0005883a 	mov	r2,zero
   10c5c:	00000706 	br	10c7c <__sfvwrite_small_dev+0x98>
   10c60:	8080000b 	ldhu	r2,0(r16)
   10c64:	10801014 	ori	r2,r2,64
   10c68:	8080000d 	sth	r2,0(r16)
   10c6c:	00bfffc4 	movi	r2,-1
   10c70:	00000206 	br	10c7c <__sfvwrite_small_dev+0x98>
   10c74:	00bfffc4 	movi	r2,-1
   10c78:	f800283a 	ret
   10c7c:	dfc00517 	ldw	ra,20(sp)
   10c80:	dd000417 	ldw	r20,16(sp)
   10c84:	dcc00317 	ldw	r19,12(sp)
   10c88:	dc800217 	ldw	r18,8(sp)
   10c8c:	dc400117 	ldw	r17,4(sp)
   10c90:	dc000017 	ldw	r16,0(sp)
   10c94:	dec00604 	addi	sp,sp,24
   10c98:	f800283a 	ret

00010c9c <strlen>:
   10c9c:	2005883a 	mov	r2,r4
   10ca0:	10c00007 	ldb	r3,0(r2)
   10ca4:	18000226 	beq	r3,zero,10cb0 <strlen+0x14>
   10ca8:	10800044 	addi	r2,r2,1
   10cac:	003ffc06 	br	10ca0 <__alt_data_end+0xffff0ca0>
   10cb0:	1105c83a 	sub	r2,r2,r4
   10cb4:	f800283a 	ret

00010cb8 <_write_r>:
   10cb8:	defffd04 	addi	sp,sp,-12
   10cbc:	dc000015 	stw	r16,0(sp)
   10cc0:	04000074 	movhi	r16,1
   10cc4:	dc400115 	stw	r17,4(sp)
   10cc8:	84057a04 	addi	r16,r16,5608
   10ccc:	2023883a 	mov	r17,r4
   10cd0:	2809883a 	mov	r4,r5
   10cd4:	300b883a 	mov	r5,r6
   10cd8:	380d883a 	mov	r6,r7
   10cdc:	dfc00215 	stw	ra,8(sp)
   10ce0:	80000015 	stw	zero,0(r16)
   10ce4:	0010ed80 	call	10ed8 <write>
   10ce8:	00ffffc4 	movi	r3,-1
   10cec:	10c0031e 	bne	r2,r3,10cfc <_write_r+0x44>
   10cf0:	80c00017 	ldw	r3,0(r16)
   10cf4:	18000126 	beq	r3,zero,10cfc <_write_r+0x44>
   10cf8:	88c00015 	stw	r3,0(r17)
   10cfc:	dfc00217 	ldw	ra,8(sp)
   10d00:	dc400117 	ldw	r17,4(sp)
   10d04:	dc000017 	ldw	r16,0(sp)
   10d08:	dec00304 	addi	sp,sp,12
   10d0c:	f800283a 	ret

00010d10 <__mulsi3>:
   10d10:	0005883a 	mov	r2,zero
   10d14:	20000726 	beq	r4,zero,10d34 <__mulsi3+0x24>
   10d18:	20c0004c 	andi	r3,r4,1
   10d1c:	2008d07a 	srli	r4,r4,1
   10d20:	18000126 	beq	r3,zero,10d28 <__mulsi3+0x18>
   10d24:	1145883a 	add	r2,r2,r5
   10d28:	294b883a 	add	r5,r5,r5
   10d2c:	203ffa1e 	bne	r4,zero,10d18 <__alt_data_end+0xffff0d18>
   10d30:	f800283a 	ret
   10d34:	f800283a 	ret

00010d38 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10d38:	008007c4 	movi	r2,31
   10d3c:	11002136 	bltu	r2,r4,10dc4 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d40:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d44:	00ffff84 	movi	r3,-2
   10d48:	38c4703a 	and	r2,r7,r3
   10d4c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10d50:	200490fa 	slli	r2,r4,3
   10d54:	02000074 	movhi	r8,1
   10d58:	4205a804 	addi	r8,r8,5792
   10d5c:	4085883a 	add	r2,r8,r2
   10d60:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10d64:	11400115 	stw	r5,4(r2)
   10d68:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10d6c:	30000726 	beq	r6,zero,10d8c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d70:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d74:	28c6703a 	and	r3,r5,r3
   10d78:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10d7c:	d0e07117 	ldw	r3,-32316(gp)
   10d80:	1104983a 	sll	r2,r2,r4
   10d84:	10c4b03a 	or	r2,r2,r3
   10d88:	00000706 	br	10da8 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d8c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d90:	28c6703a 	and	r3,r5,r3
   10d94:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10d98:	1104983a 	sll	r2,r2,r4
   10d9c:	d0e07117 	ldw	r3,-32316(gp)
   10da0:	0084303a 	nor	r2,zero,r2
   10da4:	10c4703a 	and	r2,r2,r3
   10da8:	d0a07115 	stw	r2,-32316(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10dac:	d0a07117 	ldw	r2,-32316(gp)
   10db0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10db4:	2801703a 	wrctl	status,r5
   10db8:	3801703a 	wrctl	status,r7
   10dbc:	0005883a 	mov	r2,zero
   10dc0:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   10dc4:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10dc8:	f800283a 	ret

00010dcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10dcc:	deffff04 	addi	sp,sp,-4
   10dd0:	01000074 	movhi	r4,1
   10dd4:	01400074 	movhi	r5,1
   10dd8:	dfc00015 	stw	ra,0(sp)
   10ddc:	2104b104 	addi	r4,r4,4804
   10de0:	29451404 	addi	r5,r5,5200

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10de4:	2140061e 	bne	r4,r5,10e00 <alt_load+0x34>
   10de8:	01000074 	movhi	r4,1
   10dec:	01400074 	movhi	r5,1
   10df0:	21000804 	addi	r4,r4,32
   10df4:	29400804 	addi	r5,r5,32
   10df8:	2140121e 	bne	r4,r5,10e44 <alt_load+0x78>
   10dfc:	00000b06 	br	10e2c <alt_load+0x60>
   10e00:	00c00074 	movhi	r3,1
   10e04:	18c51404 	addi	r3,r3,5200
   10e08:	1907c83a 	sub	r3,r3,r4
   10e0c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10e10:	10fff526 	beq	r2,r3,10de8 <__alt_data_end+0xffff0de8>
    {
      *to++ = *from++;
   10e14:	114f883a 	add	r7,r2,r5
   10e18:	39c00017 	ldw	r7,0(r7)
   10e1c:	110d883a 	add	r6,r2,r4
   10e20:	10800104 	addi	r2,r2,4
   10e24:	31c00015 	stw	r7,0(r6)
   10e28:	003ff906 	br	10e10 <__alt_data_end+0xffff0e10>
   10e2c:	01000074 	movhi	r4,1
   10e30:	01400074 	movhi	r5,1
   10e34:	2104a604 	addi	r4,r4,4760
   10e38:	2944a604 	addi	r5,r5,4760

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10e3c:	2140101e 	bne	r4,r5,10e80 <alt_load+0xb4>
   10e40:	00000b06 	br	10e70 <alt_load+0xa4>
   10e44:	00c00074 	movhi	r3,1
   10e48:	18c06004 	addi	r3,r3,384
   10e4c:	1907c83a 	sub	r3,r3,r4
   10e50:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10e54:	10fff526 	beq	r2,r3,10e2c <__alt_data_end+0xffff0e2c>
    {
      *to++ = *from++;
   10e58:	114f883a 	add	r7,r2,r5
   10e5c:	39c00017 	ldw	r7,0(r7)
   10e60:	110d883a 	add	r6,r2,r4
   10e64:	10800104 	addi	r2,r2,4
   10e68:	31c00015 	stw	r7,0(r6)
   10e6c:	003ff906 	br	10e54 <__alt_data_end+0xffff0e54>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10e70:	00110fc0 	call	110fc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10e74:	dfc00017 	ldw	ra,0(sp)
   10e78:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10e7c:	00111e81 	jmpi	111e8 <alt_icache_flush_all>
   10e80:	00c00074 	movhi	r3,1
   10e84:	18c4b104 	addi	r3,r3,4804
   10e88:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10e8c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10e90:	18bff726 	beq	r3,r2,10e70 <__alt_data_end+0xffff0e70>
    {
      *to++ = *from++;
   10e94:	114f883a 	add	r7,r2,r5
   10e98:	39c00017 	ldw	r7,0(r7)
   10e9c:	110d883a 	add	r6,r2,r4
   10ea0:	10800104 	addi	r2,r2,4
   10ea4:	31c00015 	stw	r7,0(r6)
   10ea8:	003ff906 	br	10e90 <__alt_data_end+0xffff0e90>

00010eac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10eac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10eb0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10eb4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10eb8:	0010f380 	call	10f38 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ebc:	0010f580 	call	10f58 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10ec0:	d1a07217 	ldw	r6,-32312(gp)
   10ec4:	d1607317 	ldw	r5,-32308(gp)
   10ec8:	d1207417 	ldw	r4,-32304(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10ecc:	dfc00017 	ldw	ra,0(sp)
   10ed0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10ed4:	00103241 	jmpi	10324 <main>

00010ed8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10ed8:	00800044 	movi	r2,1
   10edc:	20800226 	beq	r4,r2,10ee8 <write+0x10>
   10ee0:	00800084 	movi	r2,2
   10ee4:	2080041e 	bne	r4,r2,10ef8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10ee8:	01000074 	movhi	r4,1
   10eec:	000f883a 	mov	r7,zero
   10ef0:	21050d04 	addi	r4,r4,5172
   10ef4:	0010f681 	jmpi	10f68 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10ef8:	d0a00917 	ldw	r2,-32732(gp)
   10efc:	10000926 	beq	r2,zero,10f24 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10f00:	deffff04 	addi	sp,sp,-4
   10f04:	dfc00015 	stw	ra,0(sp)
   10f08:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10f0c:	00c01444 	movi	r3,81
   10f10:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10f14:	00bfffc4 	movi	r2,-1
   10f18:	dfc00017 	ldw	ra,0(sp)
   10f1c:	dec00104 	addi	sp,sp,4
   10f20:	f800283a 	ret
   10f24:	d0a07004 	addi	r2,gp,-32320
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10f28:	00c01444 	movi	r3,81
   10f2c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10f30:	00bfffc4 	movi	r2,-1
   10f34:	f800283a 	ret

00010f38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10f38:	deffff04 	addi	sp,sp,-4
   10f3c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10f40:	00111ec0 	call	111ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10f44:	00800044 	movi	r2,1
   10f48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10f4c:	dfc00017 	ldw	ra,0(sp)
   10f50:	dec00104 	addi	sp,sp,4
   10f54:	f800283a 	ret

00010f58 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10f58:	01000074 	movhi	r4,1
   10f5c:	d1600504 	addi	r5,gp,-32748
   10f60:	2104e904 	addi	r4,r4,5028
   10f64:	00111081 	jmpi	11108 <alt_dev_llist_insert>

00010f68 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10f68:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10f6c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10f70:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f74:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10f78:	2980072e 	bgeu	r5,r6,10f98 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f7c:	38c00037 	ldwio	r3,0(r7)
   10f80:	18ffffec 	andhi	r3,r3,65535
   10f84:	183ffc26 	beq	r3,zero,10f78 <__alt_data_end+0xffff0f78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10f88:	28c00007 	ldb	r3,0(r5)
   10f8c:	20c00035 	stwio	r3,0(r4)
   10f90:	29400044 	addi	r5,r5,1
   10f94:	003ff806 	br	10f78 <__alt_data_end+0xffff0f78>

  return count;
}
   10f98:	f800283a 	ret

00010f9c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10f9c:	d1600504 	addi	r5,gp,-32748
   10fa0:	00111741 	jmpi	11174 <alt_find_dev>

00010fa4 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   10fa4:	20800a17 	ldw	r2,40(r4)
   10fa8:	10800023 	ldbuio	r2,0(r2)
   10fac:	28800005 	stb	r2,0(r5)

	return 0;
}
   10fb0:	0005883a 	mov	r2,zero
   10fb4:	f800283a 	ret

00010fb8 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10fb8:	20800a17 	ldw	r2,40(r4)
   10fbc:	29400fcc 	andi	r5,r5,63
   10fc0:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10fc4:	20800a17 	ldw	r2,40(r4)
   10fc8:	10800063 	ldbuio	r2,1(r2)
   10fcc:	30800005 	stb	r2,0(r6)

	return 0;
}
   10fd0:	0005883a 	mov	r2,zero
   10fd4:	f800283a 	ret

00010fd8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10fd8:	20800a17 	ldw	r2,40(r4)
   10fdc:	29400fcc 	andi	r5,r5,63
   10fe0:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   10fe4:	20800a17 	ldw	r2,40(r4)
   10fe8:	11800065 	stbio	r6,1(r2)

	return 0;
}
   10fec:	0005883a 	mov	r2,zero
   10ff0:	f800283a 	ret

00010ff4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10ff4:	20800a17 	ldw	r2,40(r4)
   10ff8:	00c00c84 	movi	r3,50
   10ffc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11000:	20800a17 	ldw	r2,40(r4)
   11004:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11008:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1100c:	10803fcc 	andi	r2,r2,255
   11010:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11014:	20800a17 	ldw	r2,40(r4)
   11018:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1101c:	20800a17 	ldw	r2,40(r4)
   11020:	10800063 	ldbuio	r2,1(r2)
   11024:	10803fcc 	andi	r2,r2,255
   11028:	1006923a 	slli	r3,r2,8
   1102c:	28800017 	ldw	r2,0(r5)
   11030:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11034:	10e0000c 	andi	r3,r2,32768
   11038:	18000126 	beq	r3,zero,11040 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   1103c:	10bffff4 	orhi	r2,r2,65535
   11040:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11044:	0005883a 	mov	r2,zero
   11048:	f800283a 	ret

0001104c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1104c:	20800a17 	ldw	r2,40(r4)
   11050:	00c00d04 	movi	r3,52
   11054:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11058:	20800a17 	ldw	r2,40(r4)
   1105c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11060:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11064:	10803fcc 	andi	r2,r2,255
   11068:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1106c:	20800a17 	ldw	r2,40(r4)
   11070:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11074:	20800a17 	ldw	r2,40(r4)
   11078:	10800063 	ldbuio	r2,1(r2)
   1107c:	10803fcc 	andi	r2,r2,255
   11080:	1006923a 	slli	r3,r2,8
   11084:	28800017 	ldw	r2,0(r5)
   11088:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   1108c:	10e0000c 	andi	r3,r2,32768
   11090:	18000126 	beq	r3,zero,11098 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11094:	10bffff4 	orhi	r2,r2,65535
   11098:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1109c:	0005883a 	mov	r2,zero
   110a0:	f800283a 	ret

000110a4 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110a4:	20800a17 	ldw	r2,40(r4)
   110a8:	00c00d84 	movi	r3,54
   110ac:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   110b0:	20800a17 	ldw	r2,40(r4)
   110b4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110b8:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   110bc:	10803fcc 	andi	r2,r2,255
   110c0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110c4:	20800a17 	ldw	r2,40(r4)
   110c8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   110cc:	20800a17 	ldw	r2,40(r4)
   110d0:	10800063 	ldbuio	r2,1(r2)
   110d4:	10803fcc 	andi	r2,r2,255
   110d8:	1006923a 	slli	r3,r2,8
   110dc:	28800017 	ldw	r2,0(r5)
   110e0:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   110e4:	10e0000c 	andi	r3,r2,32768
   110e8:	18000126 	beq	r3,zero,110f0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   110ec:	10bffff4 	orhi	r2,r2,65535
   110f0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   110f4:	0005883a 	mov	r2,zero
   110f8:	f800283a 	ret

000110fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   110fc:	f800283a 	ret

00011100 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11100:	3005883a 	mov	r2,r6
   11104:	f800283a 	ret

00011108 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11108:	20000226 	beq	r4,zero,11114 <alt_dev_llist_insert+0xc>
   1110c:	20800217 	ldw	r2,8(r4)
   11110:	1000101e 	bne	r2,zero,11154 <alt_dev_llist_insert+0x4c>
   11114:	d0a00917 	ldw	r2,-32732(gp)
   11118:	10000926 	beq	r2,zero,11140 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1111c:	deffff04 	addi	sp,sp,-4
   11120:	dfc00015 	stw	ra,0(sp)
   11124:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11128:	00c00584 	movi	r3,22
   1112c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11130:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11134:	dfc00017 	ldw	ra,0(sp)
   11138:	dec00104 	addi	sp,sp,4
   1113c:	f800283a 	ret
   11140:	d0a07004 	addi	r2,gp,-32320
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11144:	00c00584 	movi	r3,22
   11148:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1114c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11150:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11154:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11158:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1115c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11160:	28800017 	ldw	r2,0(r5)
   11164:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11168:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   1116c:	0005883a 	mov	r2,zero
   11170:	f800283a 	ret

00011174 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11174:	defffb04 	addi	sp,sp,-20
   11178:	dcc00315 	stw	r19,12(sp)
   1117c:	dc800215 	stw	r18,8(sp)
   11180:	dc400115 	stw	r17,4(sp)
   11184:	dc000015 	stw	r16,0(sp)
   11188:	dfc00415 	stw	ra,16(sp)
   1118c:	2027883a 	mov	r19,r4
   11190:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11194:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11198:	0010c9c0 	call	10c9c <strlen>
   1119c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   111a0:	84400726 	beq	r16,r17,111c0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   111a4:	81000217 	ldw	r4,8(r16)
   111a8:	900d883a 	mov	r6,r18
   111ac:	980b883a 	mov	r5,r19
   111b0:	00112680 	call	11268 <memcmp>
   111b4:	10000426 	beq	r2,zero,111c8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   111b8:	84000017 	ldw	r16,0(r16)
   111bc:	003ff806 	br	111a0 <__alt_data_end+0xffff11a0>
  }
  
  /* No match found */
  
  return NULL;
   111c0:	0005883a 	mov	r2,zero
   111c4:	00000106 	br	111cc <alt_find_dev+0x58>
   111c8:	8005883a 	mov	r2,r16
}
   111cc:	dfc00417 	ldw	ra,16(sp)
   111d0:	dcc00317 	ldw	r19,12(sp)
   111d4:	dc800217 	ldw	r18,8(sp)
   111d8:	dc400117 	ldw	r17,4(sp)
   111dc:	dc000017 	ldw	r16,0(sp)
   111e0:	dec00504 	addi	sp,sp,20
   111e4:	f800283a 	ret

000111e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   111e8:	f800283a 	ret

000111ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   111ec:	000170fa 	wrctl	ienable,zero
   111f0:	f800283a 	ret

000111f4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   111f4:	213ffe84 	addi	r4,r4,-6
   111f8:	008003c4 	movi	r2,15
   111fc:	11001636 	bltu	r2,r4,11258 <alt_exception_cause_generated_bad_addr+0x64>
   11200:	200890ba 	slli	r4,r4,2
   11204:	00800074 	movhi	r2,1
   11208:	10848604 	addi	r2,r2,4632
   1120c:	2089883a 	add	r4,r4,r2
   11210:	20800017 	ldw	r2,0(r4)
   11214:	1000683a 	jmp	r2
   11218:	00011260 	cmpeqi	zero,zero,1097
   1121c:	00011260 	cmpeqi	zero,zero,1097
   11220:	00011258 	cmpnei	zero,zero,1097
   11224:	00011258 	cmpnei	zero,zero,1097
   11228:	00011258 	cmpnei	zero,zero,1097
   1122c:	00011260 	cmpeqi	zero,zero,1097
   11230:	00011258 	cmpnei	zero,zero,1097
   11234:	00011258 	cmpnei	zero,zero,1097
   11238:	00011260 	cmpeqi	zero,zero,1097
   1123c:	00011260 	cmpeqi	zero,zero,1097
   11240:	00011258 	cmpnei	zero,zero,1097
   11244:	00011260 	cmpeqi	zero,zero,1097
   11248:	00011258 	cmpnei	zero,zero,1097
   1124c:	00011258 	cmpnei	zero,zero,1097
   11250:	00011258 	cmpnei	zero,zero,1097
   11254:	00011260 	cmpeqi	zero,zero,1097
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11258:	0005883a 	mov	r2,zero
   1125c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11260:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11264:	f800283a 	ret

00011268 <memcmp>:
   11268:	218d883a 	add	r6,r4,r6
   1126c:	21800826 	beq	r4,r6,11290 <memcmp+0x28>
   11270:	20800003 	ldbu	r2,0(r4)
   11274:	28c00003 	ldbu	r3,0(r5)
   11278:	10c00226 	beq	r2,r3,11284 <memcmp+0x1c>
   1127c:	10c5c83a 	sub	r2,r2,r3
   11280:	f800283a 	ret
   11284:	21000044 	addi	r4,r4,1
   11288:	29400044 	addi	r5,r5,1
   1128c:	003ff706 	br	1126c <__alt_data_end+0xffff126c>
   11290:	0005883a 	mov	r2,zero
   11294:	f800283a 	ret
