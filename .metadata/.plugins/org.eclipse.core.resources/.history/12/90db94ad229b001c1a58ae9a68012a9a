#include "system.h"
#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <stdlib.h>
#include <sys/alt_stdio.h>
#include <time.h>
#include "alt_types.h"
#include "sys/times.h"


#define OFFSET -32
#define PWM_PERIOD 16
#define N 10

alt_8 pwm = 0;
alt_u8 led;
int level;

alt_32 avgx[N];
alt_32 avgy[N];

int movingAVGx(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
		avgx[i-1] = avgx[i];
		average += avgx[i-1];
	}
	avgx[N-1] = readVal;
	average += avgx[N-1];

	return average/N;

}
int movingAVGy(alt_32 readVal){

	alt_32 average = 0;

	for (int i = 1; i < N; i++){
		avgy[i-1] = avgy[i];
		average += avgy[i-1];
	}
	avgy[N-1] = readVal;
	average += avgy[N-1];

	return average/N;
}

void sys_timer_isr() {
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);

	if (pwm > PWM_PERIOD) {
		pwm = 0;
	} else {
		pwm++;
	}
}



void timer_init(void * isr) {

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
	alt_irq_register(TIMER_IRQ, 0, isr);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}



int main() {

	alt_32 x_read;
	alt_32 y_read;
	alt_32 z_read;
	alt_u8 sw;
	alt_u8 button;

	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
	return 1;
}

	timer_init(sys_timer_isr);

	while (1) {

		sw=IORD(SWITCH_BASE,0);
		button=IORD(BUTTON_BASE,0);

		IOWR(LED_BASE,0, sw);

		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
		//alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
		//alt_printf("X AXIS = %x || Y AXIS = %x || Z AXIS = %x \n",movingAVG2(x_read),movingAVG2(y_read),movingAVG2(z_read));
		if ((sw & 0x01)==1){
		   printf("%d|%d\n",movingAVGx(x_read),movingAVGy(y_read));
		}

		//alt_printf("%x\n",y_read);
		//alt_printf("%x\n",z_read);
		//printf("%i \n",movingAVG(x_read));
		clock_t start = clock();
		printf(start);
		//while (clock() < start + 50);

	}

	return 0;
}
